* 读书笔记
<<concurrency in go>>
** 死锁
#+begin_src golang
package main

import (
	"fmt"
	"sync"
	"time"
)

func main() {
	type value struct {
		mu    sync.Mutex
		value int
	}
	var wg sync.WaitGroup
	printSum := func(v1, v2 *value) {
		defer wg.Done()
		v1.mu.Lock()
		defer v1.mu.Unlock()
		time.Sleep(2 * time.Second)
		v2.mu.Lock()
		defer v2.mu.Unlock()
		fmt.Printf("sum=%v\n", v1.value+v2.value)
	}
	var a, b value
	wg.Add(2)
	go printSum(&a, &b)
	go printSum(&b, &a)
	wg.Wait()
}
#+end_src
结果如下所示
#+begin_src bash
fatal error: all goroutines are asleep - deadlock!

goroutine 1 [semacquire]:
sync.runtime_Semacquire(0xc42001613c)
	/home/rtags/go1.9/src/runtime/sema.go:56 +0x39
sync.(*WaitGroup).Wait(0xc420016130)
	/home/rtags/go1.9/src/sync/waitgroup.go:131 +0x72
main.main()
	/home/rtags/learning/src/glide_test/test.go:28 +0x129

goroutine 5 [semacquire]:
sync.runtime_SemacquireMutex(0xc420016154, 0x0)
	/home/rtags/go1.9/src/runtime/sema.go:71 +0x3d
sync.(*Mutex).Lock(0xc420016150)
	/home/rtags/go1.9/src/sync/mutex.go:134 +0xee
main.main.func1(0xc420016140, 0xc420016150)
	/home/rtags/learning/src/glide_test/test.go:20 +0xa1
created by main.main
	/home/rtags/learning/src/glide_test/test.go:26 +0xf1

goroutine 6 [semacquire]:
sync.runtime_SemacquireMutex(0xc420016144, 0x0)
	/home/rtags/go1.9/src/runtime/sema.go:71 +0x3d
sync.(*Mutex).Lock(0xc420016140)
	/home/rtags/go1.9/src/sync/mutex.go:134 +0xee
main.main.func1(0xc420016150, 0xc420016140)
	/home/rtags/learning/src/glide_test/test.go:20 +0xa1
created by main.main
	/home/rtags/learning/src/glide_test/test.go:27 +0x11b
exit status 2

Compilation exited abnormally with code 1 at Thu Jun 21 16:16:20
#+end_src
可以清楚的看到协程5和协程6对mutex的竞争导致死锁
